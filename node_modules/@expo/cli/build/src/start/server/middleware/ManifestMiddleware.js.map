{"version":3,"sources":["../../../../../src/start/server/middleware/ManifestMiddleware.ts"],"sourcesContent":["import { ExpoConfig, ExpoGoConfig, getConfig, ProjectConfig } from '@expo/config';\nimport findWorkspaceRoot from 'find-yarn-workspace-root';\nimport path from 'path';\nimport { resolve } from 'url';\n\nimport * as Log from '../../../log';\nimport { env } from '../../../utils/env';\nimport { stripExtension } from '../../../utils/url';\nimport * as ProjectDevices from '../../project/devices';\nimport { UrlCreator } from '../UrlCreator';\nimport { getPlatformBundlers } from '../platformBundlers';\nimport { createTemplateHtmlFromExpoConfigAsync } from '../webTemplate';\nimport { ExpoMiddleware } from './ExpoMiddleware';\nimport { resolveGoogleServicesFile, resolveManifestAssets } from './resolveAssets';\nimport { resolveAbsoluteEntryPoint } from './resolveEntryPoint';\nimport { parsePlatformHeader, RuntimePlatform } from './resolvePlatform';\nimport { ServerHeaders, ServerNext, ServerRequest, ServerResponse } from './server.types';\n\nconst debug = require('debug')('expo:start:server:middleware:manifest') as typeof console.log;\n\n/** Wraps `findWorkspaceRoot` and guards against having an empty `package.json` file in an upper directory. */\nexport function getWorkspaceRoot(projectRoot: string): string | null {\n  try {\n    return findWorkspaceRoot(projectRoot);\n  } catch (error: any) {\n    if (error.message.includes('Unexpected end of JSON input')) {\n      return null;\n    }\n    throw error;\n  }\n}\n\nexport function getMetroServerRoot(projectRoot: string) {\n  if (env.EXPO_USE_METRO_WORKSPACE_ROOT) {\n    return getWorkspaceRoot(projectRoot) ?? projectRoot;\n  }\n\n  return projectRoot;\n}\n\n/** Info about the computer hosting the dev server. */\nexport interface HostInfo {\n  host: string;\n  server: 'expo';\n  serverVersion: string;\n  serverDriver: string | null;\n  serverOS: NodeJS.Platform;\n  serverOSVersion: string;\n}\n\n/** Parsed values from the supported request headers. */\nexport interface ManifestRequestInfo {\n  /** Should return the signed manifest. */\n  acceptSignature: boolean;\n  /** Platform to serve. */\n  platform: RuntimePlatform;\n  /** Requested host name. */\n  hostname?: string | null;\n}\n\n/** Project related info. */\nexport type ResponseProjectSettings = {\n  expoGoConfig: ExpoGoConfig;\n  hostUri: string;\n  bundleUrl: string;\n  exp: ExpoConfig;\n};\n\nexport const DEVELOPER_TOOL = 'expo-cli';\n\nexport type ManifestMiddlewareOptions = {\n  /** Should start the dev servers in development mode (minify). */\n  mode?: 'development' | 'production';\n  /** Should instruct the bundler to create minified bundles. */\n  minify?: boolean;\n  constructUrl: UrlCreator['constructUrl'];\n  isNativeWebpack?: boolean;\n  privateKeyPath?: string;\n};\n\n/** Base middleware creator for serving the Expo manifest (like the index.html but for native runtimes). */\nexport abstract class ManifestMiddleware<\n  TManifestRequestInfo extends ManifestRequestInfo\n> extends ExpoMiddleware {\n  private initialProjectConfig: ProjectConfig;\n\n  constructor(protected projectRoot: string, protected options: ManifestMiddlewareOptions) {\n    super(\n      projectRoot,\n      /**\n       * Only support `/`, `/manifest`, `/index.exp` for the manifest middleware.\n       */\n      ['/', '/manifest', '/index.exp']\n    );\n    this.initialProjectConfig = getConfig(projectRoot);\n  }\n\n  /** Exposed for testing. */\n  public async _resolveProjectSettingsAsync({\n    platform,\n    hostname,\n  }: Pick<TManifestRequestInfo, 'hostname' | 'platform'>): Promise<ResponseProjectSettings> {\n    // Read the config\n    const projectConfig = getConfig(this.projectRoot);\n\n    // Read from headers\n    const mainModuleName = this.resolveMainModuleName(projectConfig, platform);\n\n    // Create the manifest and set fields within it\n    const expoGoConfig = this.getExpoGoConfig({\n      mainModuleName,\n      hostname,\n    });\n\n    const hostUri = this.options.constructUrl({ scheme: '', hostname });\n\n    const bundleUrl = this._getBundleUrl({\n      platform,\n      mainModuleName,\n      hostname,\n    });\n\n    // Resolve all assets and set them on the manifest as URLs\n    await this.mutateManifestWithAssetsAsync(projectConfig.exp, bundleUrl);\n\n    return {\n      expoGoConfig,\n      hostUri,\n      bundleUrl,\n      exp: projectConfig.exp,\n    };\n  }\n\n  /** Get the main entry module ID (file) relative to the project root. */\n  private resolveMainModuleName(projectConfig: ProjectConfig, platform: string): string {\n    let entryPoint = path.relative(\n      getMetroServerRoot(this.projectRoot),\n      resolveAbsoluteEntryPoint(this.projectRoot, platform, projectConfig)\n    );\n\n    debug(`Resolved entry point: ${entryPoint} (project root: ${this.projectRoot})`);\n\n    // NOTE(Bacon): Webpack is currently hardcoded to index.bundle on native\n    // in the future (TODO) we should move this logic into a Webpack plugin and use\n    // a generated file name like we do on web.\n    // const server = getDefaultDevServer();\n    // // TODO: Move this into BundlerDevServer and read this info from self.\n    // const isNativeWebpack = server instanceof WebpackBundlerDevServer && server.isTargetingNative();\n    if (this.options.isNativeWebpack) {\n      entryPoint = 'index.js';\n    }\n\n    return stripExtension(entryPoint, 'js');\n  }\n\n  /** Parse request headers into options. */\n  public abstract getParsedHeaders(req: ServerRequest): TManifestRequestInfo;\n\n  /** Store device IDs that were sent in the request headers. */\n  private async saveDevicesAsync(req: ServerRequest) {\n    const deviceIds = req.headers?.['expo-dev-client-id'];\n    if (deviceIds) {\n      await ProjectDevices.saveDevicesAsync(this.projectRoot, deviceIds).catch((e) =>\n        Log.exception(e)\n      );\n    }\n  }\n\n  /** Create the bundle URL (points to the single JS entry file). Exposed for testing. */\n  public _getBundleUrl({\n    platform,\n    mainModuleName,\n    hostname,\n  }: {\n    platform: string;\n    hostname?: string | null;\n    mainModuleName: string;\n  }): string {\n    const path = this._getBundleUrlPath({ platform, mainModuleName });\n\n    return (\n      this.options.constructUrl({\n        scheme: 'http',\n        // hostType: this.options.location.hostType,\n        hostname,\n      }) + path\n    );\n  }\n\n  public _getBundleUrlPath({\n    platform,\n    mainModuleName,\n  }: {\n    platform: string;\n    mainModuleName: string;\n  }): string {\n    const queryParams = new URLSearchParams({\n      platform: encodeURIComponent(platform),\n      dev: String(this.options.mode !== 'production'),\n      // TODO: Is this still needed?\n      hot: String(false),\n    });\n\n    if (this.options.minify) {\n      queryParams.append('minify', String(this.options.minify));\n    }\n\n    return `/${encodeURI(mainModuleName)}.bundle?${queryParams.toString()}`;\n  }\n\n  /** Log telemetry. */\n  protected abstract trackManifest(version?: string): void;\n\n  /** Get the manifest response to return to the runtime. This file contains info regarding where the assets can be loaded from. Exposed for testing. */\n  public abstract _getManifestResponseAsync(options: TManifestRequestInfo): Promise<{\n    body: string;\n    version: string;\n    headers: ServerHeaders;\n  }>;\n\n  private getExpoGoConfig({\n    mainModuleName,\n    hostname,\n  }: {\n    mainModuleName: string;\n    hostname?: string | null;\n  }): ExpoGoConfig {\n    return {\n      // localhost:19000\n      debuggerHost: this.options.constructUrl({ scheme: '', hostname }),\n      // http://localhost:19000/logs -- used to send logs to the CLI for displaying in the terminal.\n      // This is deprecated in favor of the WebSocket connection setup in Metro.\n      logUrl: this.options.constructUrl({ scheme: 'http', hostname }) + '/logs',\n      // Required for Expo Go to function.\n      developer: {\n        tool: DEVELOPER_TOOL,\n        projectRoot: this.projectRoot,\n      },\n      packagerOpts: {\n        // Required for dev client.\n        dev: this.options.mode !== 'production',\n      },\n      // Indicates the name of the main bundle.\n      mainModuleName,\n      // Add this string to make Flipper register React Native / Metro as \"running\".\n      // Can be tested by running:\n      // `METRO_SERVER_PORT=19000 open -a flipper.app`\n      // Where 19000 is the port where the Expo project is being hosted.\n      __flipperHack: 'React Native packager is running',\n    };\n  }\n\n  /** Resolve all assets and set them on the manifest as URLs */\n  private async mutateManifestWithAssetsAsync(manifest: ExpoConfig, bundleUrl: string) {\n    await resolveManifestAssets(this.projectRoot, {\n      manifest,\n      resolver: async (path) => {\n        if (this.options.isNativeWebpack) {\n          // When using our custom dev server, just do assets normally\n          // without the `assets/` subpath redirect.\n          return resolve(bundleUrl!.match(/^https?:\\/\\/.*?\\//)![0], path);\n        }\n        return bundleUrl!.match(/^https?:\\/\\/.*?\\//)![0] + 'assets/' + path;\n      },\n    });\n    // The server normally inserts this but if we're offline we'll do it here\n    await resolveGoogleServicesFile(this.projectRoot, manifest);\n  }\n\n  /**\n   * Web platforms should create an index.html response using the same script resolution as native.\n   *\n   * Instead of adding a `bundleUrl` to a `manifest.json` (native) we'll add a `<script src=\"\">`\n   * to an `index.html`, this enables the web platform to load JavaScript from the server.\n   */\n  private async handleWebRequestAsync(req: ServerRequest, res: ServerResponse) {\n    const platform = 'web';\n    // Read from headers\n    const mainModuleName = this.resolveMainModuleName(this.initialProjectConfig, platform);\n    const bundleUrl = this._getBundleUrlPath({\n      platform,\n      mainModuleName,\n    });\n\n    res.setHeader('Content-Type', 'text/html');\n\n    res.end(\n      await createTemplateHtmlFromExpoConfigAsync(this.projectRoot, {\n        exp: this.initialProjectConfig.exp,\n        scripts: [bundleUrl],\n      })\n    );\n  }\n\n  /** Exposed for testing. */\n  async checkBrowserRequestAsync(req: ServerRequest, res: ServerResponse) {\n    // Read the config\n    const bundlers = getPlatformBundlers(this.initialProjectConfig.exp);\n    if (bundlers.web === 'metro') {\n      // NOTE(EvanBacon): This effectively disables the safety check we do on custom runtimes to ensure\n      // the `expo-platform` header is included. When `web.bundler=web`, if the user has non-standard Expo\n      // code loading then they'll get a web bundle without a clear assertion of platform support.\n      const platform = parsePlatformHeader(req);\n      // On web, serve the public folder\n      if (!platform || platform === 'web') {\n        await this.handleWebRequestAsync(req, res);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  async handleRequestAsync(\n    req: ServerRequest,\n    res: ServerResponse,\n    next: ServerNext\n  ): Promise<void> {\n    // First check for standard JavaScript runtimes (aka legacy browsers like Chrome).\n    if (await this.checkBrowserRequestAsync(req, res)) {\n      return;\n    }\n\n    // Save device IDs for dev client.\n    await this.saveDevicesAsync(req);\n\n    // Read from headers\n    const options = this.getParsedHeaders(req);\n    const { body, version, headers } = await this._getManifestResponseAsync(options);\n    for (const [headerName, headerValue] of headers) {\n      res.setHeader(headerName, headerValue);\n    }\n    res.end(body);\n\n    // Log analytics\n    this.trackManifest(version ?? null);\n  }\n}\n"],"names":["getWorkspaceRoot","getMetroServerRoot","Log","ProjectDevices","debug","require","projectRoot","findWorkspaceRoot","error","message","includes","env","EXPO_USE_METRO_WORKSPACE_ROOT","DEVELOPER_TOOL","ManifestMiddleware","ExpoMiddleware","constructor","options","initialProjectConfig","getConfig","_resolveProjectSettingsAsync","platform","hostname","projectConfig","mainModuleName","resolveMainModuleName","expoGoConfig","getExpoGoConfig","hostUri","constructUrl","scheme","bundleUrl","_getBundleUrl","mutateManifestWithAssetsAsync","exp","entryPoint","path","relative","resolveAbsoluteEntryPoint","isNativeWebpack","stripExtension","saveDevicesAsync","req","deviceIds","headers","catch","e","exception","_getBundleUrlPath","queryParams","URLSearchParams","encodeURIComponent","dev","String","mode","hot","minify","append","encodeURI","toString","debuggerHost","logUrl","developer","tool","packagerOpts","__flipperHack","manifest","resolveManifestAssets","resolver","resolve","match","resolveGoogleServicesFile","handleWebRequestAsync","res","setHeader","end","createTemplateHtmlFromExpoConfigAsync","scripts","checkBrowserRequestAsync","bundlers","getPlatformBundlers","web","parsePlatformHeader","handleRequestAsync","next","getParsedHeaders","body","version","_getManifestResponseAsync","headerName","headerValue","trackManifest"],"mappings":"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"}